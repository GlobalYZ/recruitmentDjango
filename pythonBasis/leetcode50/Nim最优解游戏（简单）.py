# 你和你的朋友，两个人一起玩Nim游戏：
# 桌子上有一堆石头。
# 你们轮流进行自己的回合，你作为先手。
# 每一回合，轮到的人拿掉1 - 3块石头。
# 拿掉最后一块石头的人就是获胜者。
# 假设你们每一步都是最优解。请编写一个函数，来判断你是否可以在给定石头数量为n的情况下赢得游戏。如果可以赢，返回true；否则，返回false 。
#
# 示例1：
# 输入：n = 4
# 输出：false
# 解释：如果堆中有4块石头，那么你永远不会赢得比赛；
# 因为无论你拿走1块、2块还是3块石头，最后一块石头总是会被你的朋友拿走。
#
# 示例2：
# 输入：n = 1
# 输出：true
#
# 示例3：
# 输入：n = 2
# 输出：true

# 首先题目的要求是什么情况下我们能赢，我们这个时候就要反着想，什么情况我们会输？这个不难想，就是在你的回合有4块石头你肯定输。为啥？
# 因为你每次能拿1-3块，4块你拿几块你都输。所以总的石头数量绝对不能是4的倍数。这里我要借鉴一个大佬的评论十分精辟
#
# 面对4的整数倍的人永远无法翻身，你拿N根对手就会拿4-N根，保证每回合共减4根，你永远面对4倍数，直到4.
# 相反，如果最开始不是4倍数，你可以拿掉刚好剩下4倍数根，让他永远面对4倍数

class Solution:
    def canWinNim(self, n: int) -> bool:
        return (n % 4) != 0