'''
参数规则
        def add(a,b=1,*args,**kwargs)
从左到右：必传参数 默认参数  可变元组参数 可变字典参数
'''

def test(a,b=1,*args):# 指定了默认值以后，如果用户传递了参数则默认值没有任何作用
    print(a,b,args)
s = (1,2)
test(1,2,*s)# 1 2 (1, 2)
# 当必传参数，默认参数和可变元组参数在一起的时候，如果需要使用赋值的形式传参，则需要在定义函数参数的时候，将可变的元组类型放在第一位，之后是必传与默认参数
# test(a=1,b=2,*s) 会报错，结论如上，这是一个特例，需要把test函数写成test(*args,a,b=1)才可以，但是不推荐这样写，还是推荐第十行写法

def add(a:int,b:int=3):
    print(a+b)

add(1,2)# 3
add('hello','小木')# hello小木  即便我们定义了函数参数类型，但执行的时候也不会匹配验证，起到告知作用


def fn2(a):
    print('a =',a)
# 函数在调用时，解析器不会检查实参的类型，实参可以传递任意类型的对象
b = 123
b = True
b = 'hello'
b = None
b = [1,2,3]

# fn2(b)
def fn4(a):
    # 在函数中对形参进行重新赋值，不会影响其他的变量
    # a = 20
    # a是一个列表，尝试修改列表中的元素
    # 如果形参执行的是一个对象，当我们通过形参去修改对象时
    #   会影响到所有指向该对象的变量
    a[0] = 30
    print('a =',a,id(a))

c = 10   
c = [1,2,3] 

fn4(c)
# fn4(c.copy())用这个和下面的切片方法就可以不传递对象了，避免同步修改。
# fn4(c[:])

print('c =',c,id(c))
